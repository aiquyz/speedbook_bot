{"ast":null,"code":"var _jsxFileName = \"/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport pdfToText from 'react-pdftotext';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n  const [text, setText] = useState(''); // Для хранения извлеченного текста\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(file); // Сохраняем выбранный файл\n      extractTextFromPage(file, 1); // Извлекаем текст с 1 страницы\n    }\n  }\n\n  // Извлечение текста с определенной страницы PDF с помощью react-pdftotext\n  function extractTextFromPage(file, pageNumber) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const arrayBuffer = e.target.result;\n      const blob = new Blob([new Uint8Array(arrayBuffer)], {\n        type: 'application/pdf'\n      });\n      pdfToText(blob, {\n        pages: [pageNumber]\n      }) // Извлекаем текст с указанной страницы\n      .then(text => {\n        const chunkSize = 1024; // Размер порции для вывода\n        let extractedText = '';\n        for (let i = 0; i < text.length; i += chunkSize) {\n          extractedText += text.substring(i, i + chunkSize); // Собираем текст частями\n        }\n        setText(extractedText); // Сохраняем полный текст в состояние\n      }).catch(error => {\n        console.error(`Error extracting text from page ${pageNumber}: `, error);\n      });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        onChange: onFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: text,\n        readOnly: true,\n        rows: 20,\n        cols: 80,\n        placeholder: \"Extracted text will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+81Yz4WIwXmauHdQRHDGlTThkiQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","pdfToText","jsxDEV","_jsxDEV","App","_s","file","setFile","text","setText","onFileChange","event","target","files","extractTextFromPage","pageNumber","reader","FileReader","onload","e","arrayBuffer","result","blob","Blob","Uint8Array","type","pages","then","chunkSize","extractedText","i","length","substring","catch","error","console","readAsArrayBuffer","className","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","value","readOnly","rows","cols","placeholder","_c","$RefreshReg$"],"sources":["/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport pdfToText from 'react-pdftotext';\nimport './App.css';\n\nfunction App() {\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n  const [text, setText] = useState(''); // Для хранения извлеченного текста\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(file); // Сохраняем выбранный файл\n      extractTextFromPage(file, 1); // Извлекаем текст с 1 страницы\n    }\n  }\n\n  // Извлечение текста с определенной страницы PDF с помощью react-pdftotext\n  function extractTextFromPage(file, pageNumber) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const arrayBuffer = e.target.result;\n      const blob = new Blob([new Uint8Array(arrayBuffer)], { type: 'application/pdf' });\n\n      pdfToText(blob, { pages: [pageNumber] }) // Извлекаем текст с указанной страницы\n        .then((text) => {\n          const chunkSize = 1024; // Размер порции для вывода\n          let extractedText = '';\n          for (let i = 0; i < text.length; i += chunkSize) {\n            extractedText += text.substring(i, i + chunkSize); // Собираем текст частями\n          }\n          setText(extractedText); // Сохраняем полный текст в состояние\n        })\n        .catch((error) => {\n          console.error(`Error extracting text from page ${pageNumber}: `, error);\n        });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input type=\"file\" accept=\"application/pdf\" onChange={onFileChange} />\n        <textarea\n          value={text}\n          readOnly\n          rows={20}\n          cols={80}\n          placeholder=\"Extracted text will appear here...\"\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}