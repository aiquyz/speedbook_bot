{"ast":null,"code":"var _jsxFileName = \"/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport pdfToText from 'react-pdftotext';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n  const [textArray, setTextArray] = useState([]); // Для хранения массива слов\n  const [isTextLoaded, setIsTextLoaded] = useState(false); // Флаг для отображения кнопки \"Старт\"\n  const [speed, setSpeed] = useState(100); // Скорость (слов в минуту)\n  const [currentWordIndex, setCurrentWordIndex] = useState(0); // Индекс текущего слова\n  const [isReading, setIsReading] = useState(false); // Флаг чтения\n  const intervalRef = useRef(null); // Для хранения таймера\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(file); // Сохраняем выбранный файл\n      extractTextFromPDF(file); // Извлекаем текст из всего документа\n    }\n  }\n\n  // Фильтрация оглавления или ненужного текста на основе ключевых слов\n  function filterContent(text) {\n    const excludeKeywords = ['Оглавление', 'Table of Contents', 'Chapter', 'Глава'];\n    return text.split('\\n').filter(line => {\n      return !excludeKeywords.some(keyword => line.includes(keyword));\n    }).join(' ');\n  }\n\n  // Извлечение текста из PDF с помощью react-pdftotext\n  function extractTextFromPDF(file) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const arrayBuffer = e.target.result;\n      const blob = new Blob([new Uint8Array(arrayBuffer)], {\n        type: 'application/pdf'\n      });\n      pdfToText(blob) // Извлекаем текст из всего документа\n      .then(text => {\n        const filteredText = filterContent(text); // Фильтруем оглавление\n        const wordsArray = filteredText.replace(/\\s+/g, ' ') // Убираем лишние пробелы\n        .split(' '); // Разбиваем текст на массив слов\n        setTextArray(wordsArray); // Сохраняем слова в массив\n        setIsTextLoaded(true); // Отображаем кнопку \"Старт\"\n      }).catch(error => {\n        console.error(\"Error extracting text from PDF: \", error);\n      });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  // Запуск процесса показа слов\n  function startReading() {\n    setIsReading(true);\n    updateInterval();\n  }\n\n  // Остановка показа слов\n  function stopReading() {\n    setIsReading(false);\n    clearInterval(intervalRef.current);\n  }\n\n  // Обновление интервала при изменении скорости\n  function updateInterval() {\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      setCurrentWordIndex(prevIndex => {\n        if (prevIndex < textArray.length - 1) {\n          return prevIndex + 1;\n        } else {\n          clearInterval(intervalRef.current);\n          return prevIndex;\n        }\n      });\n    }, 60 / speed * 1000); // Устанавливаем интервал на основе скорости слов в минуту\n  }\n\n  // Обновляем интервал динамически при изменении скорости\n  useEffect(() => {\n    if (isReading) {\n      updateInterval(); // Обновляем таймер, если читаем\n    }\n    // Очищаем таймер при размонтировании\n    return () => clearInterval(intervalRef.current);\n  }, [speed, isReading]); // Обновляем, когда изменяется скорость или статус чтения\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        onChange: onFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), isTextLoaded && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"10\",\n            max: \"300\",\n            value: speed,\n            onChange: e => setSpeed(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Words per minute: \", speed]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), !isReading ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startReading,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopReading,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), isReading && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: textArray[currentWordIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PRJTjNahQJTVMSxnlaEXvlNoPNA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","pdfToText","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","file","setFile","textArray","setTextArray","isTextLoaded","setIsTextLoaded","speed","setSpeed","currentWordIndex","setCurrentWordIndex","isReading","setIsReading","intervalRef","onFileChange","event","target","files","extractTextFromPDF","filterContent","text","excludeKeywords","split","filter","line","some","keyword","includes","join","reader","FileReader","onload","e","arrayBuffer","result","blob","Blob","Uint8Array","type","then","filteredText","wordsArray","replace","catch","error","console","readAsArrayBuffer","startReading","updateInterval","stopReading","clearInterval","current","setInterval","prevIndex","length","className","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","min","max","value","onClick","_c","$RefreshReg$"],"sources":["/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport pdfToText from 'react-pdftotext';\nimport './App.css';\n\nfunction App() {\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n  const [textArray, setTextArray] = useState([]); // Для хранения массива слов\n  const [isTextLoaded, setIsTextLoaded] = useState(false); // Флаг для отображения кнопки \"Старт\"\n  const [speed, setSpeed] = useState(100); // Скорость (слов в минуту)\n  const [currentWordIndex, setCurrentWordIndex] = useState(0); // Индекс текущего слова\n  const [isReading, setIsReading] = useState(false); // Флаг чтения\n  const intervalRef = useRef(null); // Для хранения таймера\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(file); // Сохраняем выбранный файл\n      extractTextFromPDF(file); // Извлекаем текст из всего документа\n    }\n  }\n\n  // Фильтрация оглавления или ненужного текста на основе ключевых слов\n  function filterContent(text) {\n    const excludeKeywords = ['Оглавление', 'Table of Contents', 'Chapter', 'Глава'];\n    return text.split('\\n').filter(line => {\n      return !excludeKeywords.some(keyword => line.includes(keyword));\n    }).join(' ');\n  }\n\n  // Извлечение текста из PDF с помощью react-pdftotext\n  function extractTextFromPDF(file) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const arrayBuffer = e.target.result;\n      const blob = new Blob([new Uint8Array(arrayBuffer)], { type: 'application/pdf' });\n\n      pdfToText(blob) // Извлекаем текст из всего документа\n        .then((text) => {\n          const filteredText = filterContent(text); // Фильтруем оглавление\n          const wordsArray = filteredText\n            .replace(/\\s+/g, ' ') // Убираем лишние пробелы\n            .split(' '); // Разбиваем текст на массив слов\n          setTextArray(wordsArray); // Сохраняем слова в массив\n          setIsTextLoaded(true); // Отображаем кнопку \"Старт\"\n        })\n        .catch((error) => {\n          console.error(\"Error extracting text from PDF: \", error);\n        });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  // Запуск процесса показа слов\n  function startReading() {\n    setIsReading(true);\n    updateInterval();\n  }\n\n  // Остановка показа слов\n  function stopReading() {\n    setIsReading(false);\n    clearInterval(intervalRef.current);\n  }\n\n  // Обновление интервала при изменении скорости\n  function updateInterval() {\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      setCurrentWordIndex((prevIndex) => {\n        if (prevIndex < textArray.length - 1) {\n          return prevIndex + 1;\n        } else {\n          clearInterval(intervalRef.current);\n          return prevIndex;\n        }\n      });\n    }, (60 / speed) * 1000); // Устанавливаем интервал на основе скорости слов в минуту\n  }\n\n  // Обновляем интервал динамически при изменении скорости\n  useEffect(() => {\n    if (isReading) {\n      updateInterval(); // Обновляем таймер, если читаем\n    }\n    // Очищаем таймер при размонтировании\n    return () => clearInterval(intervalRef.current);\n  }, [speed, isReading]); // Обновляем, когда изменяется скорость или статус чтения\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input type=\"file\" accept=\"application/pdf\" onChange={onFileChange} />\n        {isTextLoaded && (\n          <>\n            <div>\n              <input\n                type=\"range\"\n                min=\"10\"\n                max=\"300\"\n                value={speed}\n                onChange={(e) => setSpeed(e.target.value)}\n              />\n              <label>Words per minute: {speed}</label>\n            </div>\n            {!isReading ? (\n              <button onClick={startReading}>Start</button>\n            ) : (\n              <button onClick={stopReading}>Stop</button>\n            )}\n          </>\n        )}\n        {isReading && <h1>{textArray[currentWordIndex]}</h1>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}