{"ast":null,"code":"var _jsxFileName = \"/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport pdfToText from 'react-pdftotext';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n  const [textArray, setTextArray] = useState([]); // Для хранения массива слов\n  const [isTextLoaded, setIsTextLoaded] = useState(false); // Флаг для отображения кнопки \"Старт\"\n  const [speed, setSpeed] = useState(100); // Скорость (слов в минуту)\n  const [currentWordIndex, setCurrentWordIndex] = useState(0); // Индекс текущего слова\n  const [isReading, setIsReading] = useState(false); // Флаг чтения\n  const intervalRef = useRef(null); // Для хранения таймера\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(file); // Сохраняем выбранный файл\n      extractTextFromPDF(file); // Извлекаем текст из всего документа\n    }\n  }\n\n  // Извлечение текста из PDF с помощью react-pdftotext\n  function extractTextFromPDF(file) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const arrayBuffer = e.target.result;\n      const blob = new Blob([new Uint8Array(arrayBuffer)], {\n        type: 'application/pdf'\n      });\n      pdfToText(blob) // Извлекаем текст из всего документа\n      .then(text => {\n        const wordsArray = text.replace(/\\s+/g, ' ') // Убираем лишние пробелы\n        .split(' '); // Разбиваем текст на массив слов\n        setTextArray(wordsArray); // Сохраняем слова в массив\n        setIsTextLoaded(true); // Отображаем кнопку \"Старт\"\n      }).catch(error => {\n        console.error(\"Error extracting text from PDF: \", error);\n      });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  // Запуск процесса показа слов\n  function startReading() {\n    setIsReading(true);\n    updateInterval();\n  }\n\n  // Остановка показа слов\n  function stopReading() {\n    setIsReading(false);\n    clearInterval(intervalRef.current);\n  }\n\n  // Обновление интервала при изменении скорости\n  function updateInterval() {\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      setCurrentWordIndex(prevIndex => {\n        if (prevIndex < textArray.length - 1) {\n          return prevIndex + 1;\n        } else {\n          clearInterval(intervalRef.current);\n          return prevIndex;\n        }\n      });\n    }, 60 / speed * 1000); // Устанавливаем интервал на основе скорости слов в минуту\n  }\n\n  // Обновляем интервал динамически при изменении скорости\n  useEffect(() => {\n    if (isReading) {\n      updateInterval(); // Обновляем таймер, если читаем\n    }\n    // Очищаем таймер при размонтировании\n    return () => clearInterval(intervalRef.current);\n  }, [speed, isReading]); // Обновляем, когда изменяется скорость или статус чтения\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        onChange: onFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), isTextLoaded && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"10\",\n            max: \"300\",\n            value: speed,\n            onChange: e => setSpeed(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Words per minute: \", speed]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), !isReading ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startReading,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopReading,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), isReading && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: textArray[currentWordIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PRJTjNahQJTVMSxnlaEXvlNoPNA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","pdfToText","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","file","setFile","textArray","setTextArray","isTextLoaded","setIsTextLoaded","speed","setSpeed","currentWordIndex","setCurrentWordIndex","isReading","setIsReading","intervalRef","onFileChange","event","target","files","extractTextFromPDF","reader","FileReader","onload","e","arrayBuffer","result","blob","Blob","Uint8Array","type","then","text","wordsArray","replace","split","catch","error","console","readAsArrayBuffer","startReading","updateInterval","stopReading","clearInterval","current","setInterval","prevIndex","length","className","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","min","max","value","onClick","_c","$RefreshReg$"],"sources":["/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport pdfToText from 'react-pdftotext';\nimport './App.css';\n\nfunction App() {\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n  const [textArray, setTextArray] = useState([]); // Для хранения массива слов\n  const [isTextLoaded, setIsTextLoaded] = useState(false); // Флаг для отображения кнопки \"Старт\"\n  const [speed, setSpeed] = useState(100); // Скорость (слов в минуту)\n  const [currentWordIndex, setCurrentWordIndex] = useState(0); // Индекс текущего слова\n  const [isReading, setIsReading] = useState(false); // Флаг чтения\n  const intervalRef = useRef(null); // Для хранения таймера\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(file); // Сохраняем выбранный файл\n      extractTextFromPDF(file); // Извлекаем текст из всего документа\n    }\n  }\n\n  // Извлечение текста из PDF с помощью react-pdftotext\n  function extractTextFromPDF(file) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const arrayBuffer = e.target.result;\n      const blob = new Blob([new Uint8Array(arrayBuffer)], { type: 'application/pdf' });\n\n      pdfToText(blob) // Извлекаем текст из всего документа\n        .then((text) => {\n          const wordsArray = text\n            .replace(/\\s+/g, ' ') // Убираем лишние пробелы\n            .split(' '); // Разбиваем текст на массив слов\n          setTextArray(wordsArray); // Сохраняем слова в массив\n          setIsTextLoaded(true); // Отображаем кнопку \"Старт\"\n        })\n        .catch((error) => {\n          console.error(\"Error extracting text from PDF: \", error);\n        });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  // Запуск процесса показа слов\n  function startReading() {\n    setIsReading(true);\n    updateInterval();\n  }\n\n  // Остановка показа слов\n  function stopReading() {\n    setIsReading(false);\n    clearInterval(intervalRef.current);\n  }\n\n  // Обновление интервала при изменении скорости\n  function updateInterval() {\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      setCurrentWordIndex((prevIndex) => {\n        if (prevIndex < textArray.length - 1) {\n          return prevIndex + 1;\n        } else {\n          clearInterval(intervalRef.current);\n          return prevIndex;\n        }\n      });\n    }, (60 / speed) * 1000); // Устанавливаем интервал на основе скорости слов в минуту\n  }\n\n  // Обновляем интервал динамически при изменении скорости\n  useEffect(() => {\n    if (isReading) {\n      updateInterval(); // Обновляем таймер, если читаем\n    }\n    // Очищаем таймер при размонтировании\n    return () => clearInterval(intervalRef.current);\n  }, [speed, isReading]); // Обновляем, когда изменяется скорость или статус чтения\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input type=\"file\" accept=\"application/pdf\" onChange={onFileChange} />\n        {isTextLoaded && (\n          <>\n            <div>\n              <input\n                type=\"range\"\n                min=\"10\"\n                max=\"300\"\n                value={speed}\n                onChange={(e) => setSpeed(e.target.value)}\n              />\n              <label>Words per minute: {speed}</label>\n            </div>\n            {!isReading ? (\n              <button onClick={startReading}>Start</button>\n            ) : (\n              <button onClick={stopReading}>Stop</button>\n            )}\n          </>\n        )}\n        {isReading && <h1>{textArray[currentWordIndex]}</h1>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}