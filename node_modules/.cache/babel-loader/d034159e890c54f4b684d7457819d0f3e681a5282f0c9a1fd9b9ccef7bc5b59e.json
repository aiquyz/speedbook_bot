{"ast":null,"code":"var _jsxFileName = \"/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport pdfToText from 'react-pdftotext';\nimport './App.css';\n\n// Указываем путь к воркеру pdfjs\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = new URL('pdfjs-dist/build/pdf.worker.min.mjs', import.meta.url).toString();\nfunction App() {\n  _s();\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n\n  // Функция обработки загрузки документа\n  function onDocumentLoadSuccess({\n    numPages\n  }) {\n    setNumPages(numPages); // Устанавливаем количество страниц из pdf объекта\n  }\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(URL.createObjectURL(file)); // Создаем URL для загруженного файла\n\n      // Извлечение текста с первой страницы загруженного PDF\n      extractTextFromPage(file, 1); // Извлекаем текст с 1 страницы\n    }\n  }\n\n  // Извлечение текста с определенной страницы PDF с помощью react-pdftotext\n  function extractTextFromPage(file, pageNumber) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const arrayBuffer = e.target.result;\n      const blob = new Blob([new Uint8Array(arrayBuffer)], {\n        type: 'application/pdf'\n      });\n      pdfToText(blob, {\n        pages: [pageNumber]\n      }) // Указываем, что нужна только первая страница\n      .then(text => {\n        // Вывод текста порциями, если он большой\n        const chunkSize = 1024; // Размер порции для вывода\n        for (let i = 0; i < text.length; i += chunkSize) {\n          console.log(text.substring(i, i + chunkSize)); // Выводим текст частями\n        }\n      }).catch(error => {\n        console.error(`Error extracting text from page ${pageNumber}: `, error);\n      });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        onChange: onFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), file && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Document, {\n          file: file,\n          onLoadSuccess: onDocumentLoadSuccess,\n          children: Array.from(new Array(numPages), (el, index) => /*#__PURE__*/_jsxDEV(Page, {\n            pageNumber: index + 1\n          }, `page_${index + 1}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Page \", pageNumber, \" of \", numPages]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: pageNumber <= 1,\n          onClick: () => setPageNumber(pageNumber - 1),\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: pageNumber >= numPages,\n          onClick: () => setPageNumber(pageNumber + 1),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KM8m/JkKJuMfvWpELnYH/2pf704=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","pdfToText","jsxDEV","_jsxDEV","Fragment","_Fragment","pdfjs","GlobalWorkerOptions","workerSrc","URL","import","meta","url","toString","App","_s","numPages","setNumPages","pageNumber","setPageNumber","file","setFile","onDocumentLoadSuccess","onFileChange","event","target","files","createObjectURL","extractTextFromPage","reader","FileReader","onload","e","arrayBuffer","result","blob","Blob","Uint8Array","type","pages","then","text","chunkSize","i","length","console","log","substring","catch","error","readAsArrayBuffer","className","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","Document","onLoadSuccess","Array","from","el","index","Page","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport pdfToText from 'react-pdftotext';\nimport './App.css';\n\n// Указываем путь к воркеру pdfjs\npdfjs.GlobalWorkerOptions.workerSrc = new URL(\n  'pdfjs-dist/build/pdf.worker.min.mjs',\n  import.meta.url,\n).toString();\n\nfunction App() {\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n\n  // Функция обработки загрузки документа\n  function onDocumentLoadSuccess({ numPages }) {\n    setNumPages(numPages); // Устанавливаем количество страниц из pdf объекта\n  }\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(URL.createObjectURL(file)); // Создаем URL для загруженного файла\n\n      // Извлечение текста с первой страницы загруженного PDF\n      extractTextFromPage(file, 1); // Извлекаем текст с 1 страницы\n    }\n  }\n\n  // Извлечение текста с определенной страницы PDF с помощью react-pdftotext\n  function extractTextFromPage(file, pageNumber) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const arrayBuffer = e.target.result;\n      const blob = new Blob([new Uint8Array(arrayBuffer)], { type: 'application/pdf' });\n\n      pdfToText(blob, { pages: [pageNumber] }) // Указываем, что нужна только первая страница\n        .then((text) => {\n          // Вывод текста порциями, если он большой\n          const chunkSize = 1024; // Размер порции для вывода\n          for (let i = 0; i < text.length; i += chunkSize) {\n            console.log(text.substring(i, i + chunkSize)); // Выводим текст частями\n          }\n        })\n        .catch((error) => {\n          console.error(`Error extracting text from page ${pageNumber}: `, error);\n        });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input type=\"file\" accept=\"application/pdf\" onChange={onFileChange} />\n        {file && (\n          <>\n            {/* Отображение всех страниц PDF с помощью react-pdf */}\n            <Document\n              file={file}\n              onLoadSuccess={onDocumentLoadSuccess}\n            >\n              {Array.from(new Array(numPages), (el, index) => (\n                <Page key={`page_${index + 1}`} pageNumber={index + 1} />\n              ))}\n            </Document>\n            <p>\n              Page {pageNumber} of {numPages}\n            </p>\n            <button\n              disabled={pageNumber <= 1}\n              onClick={() => setPageNumber(pageNumber - 1)}\n            >\n              Previous\n            </button>\n            <button\n              disabled={pageNumber >= numPages}\n              onClick={() => setPageNumber(pageNumber + 1)}\n            >\n              Next\n            </button>\n          </>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}