{"ast":null,"code":"var _jsxFileName = \"/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport './App.css';\n\n// Указываем путь к воркеру для PDF.js\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.js`;\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n  const [textArray, setTextArray] = useState([]); // Для хранения массива слов\n  const [isTextLoaded, setIsTextLoaded] = useState(false); // Флаг для отображения кнопки \"Старт\"\n  const [speed, setSpeed] = useState(100); // Скорость (слов в минуту)\n  const [currentWordIndex, setCurrentWordIndex] = useState(0); // Индекс текущего слова\n  const [isReading, setIsReading] = useState(false); // Флаг чтения\n  const [pageNumber, setPageNumber] = useState(1); // Текущий номер страницы\n  const [numPages, setNumPages] = useState(null); // Общее количество страниц\n  const [selectedPage, setSelectedPage] = useState(null); // Выбранная страница для конвертации\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(file); // Сохраняем выбранный файл\n      setPageNumber(1); // Сбрасываем на первую страницу\n      setSelectedPage(null); // Сбрасываем выбранную страницу\n      setIsTextLoaded(false); // Сбрасываем флаг загрузки текста\n    }\n  }\n\n  // Функция обработки загрузки документа PDF\n  function onDocumentLoadSuccess(pdf) {\n    setNumPages(pdf.numPages); // Устанавливаем количество страниц\n  }\n\n  // Извлечение текста с выбранной страницы с использованием pdfjs\n  async function extractTextFromSelectedPage(pdfFile, pageNum) {\n    try {\n      const loadingTask = pdfjs.getDocument({\n        url: URL.createObjectURL(pdfFile)\n      });\n      const pdf = await loadingTask.promise;\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items.map(item => item.str);\n      const text = textItems.join(' ');\n      const wordsArray = text.split(' ').filter(word => word.trim() !== '');\n      setTextArray(wordsArray);\n      setCurrentWordIndex(0);\n      setIsTextLoaded(true);\n    } catch (error) {\n      console.error(\"Error extracting text from PDF: \", error);\n    }\n  }\n\n  // Запуск процесса показа слов\n  function startReading() {\n    setIsReading(true);\n  }\n\n  // Остановка показа слов\n  function stopReading() {\n    setIsReading(false);\n  }\n\n  // Обновление индекса текущего слова\n  useEffect(() => {\n    let interval = null;\n    if (isReading) {\n      interval = setInterval(() => {\n        setCurrentWordIndex(prevIndex => {\n          if (prevIndex < textArray.length - 1) {\n            return prevIndex + 1;\n          } else {\n            clearInterval(interval);\n            setIsReading(false);\n            return prevIndex;\n          }\n        });\n      }, 60 / speed * 1000);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isReading, speed, textArray]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        onChange: onFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), file && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Document, {\n          file: file,\n          onLoadSuccess: onDocumentLoadSuccess,\n          children: /*#__PURE__*/_jsxDEV(Page, {\n            pageNumber: pageNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Go to page: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"1\",\n            max: numPages,\n            value: pageNumber,\n            onChange: e => setPageNumber(parseInt(e.target.value) || 1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedPage(pageNumber),\n            children: \"Select Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), selectedPage && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => extractTextFromSelectedPage(file, selectedPage),\n          children: [\"Convert text from page \", selectedPage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false), isTextLoaded && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"10\",\n            max: \"300\",\n            value: speed,\n            onChange: e => setSpeed(parseInt(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Words per minute: \", speed]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), !isReading ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startReading,\n          children: \"Start Reading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopReading,\n          children: \"Stop Reading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), isReading && textArray[currentWordIndex] && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: textArray[currentWordIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ICjIOHm7qt9jKVTUrNeVbsFGLEo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Document","Page","pdfjs","jsxDEV","_jsxDEV","Fragment","_Fragment","GlobalWorkerOptions","workerSrc","version","App","_s","file","setFile","textArray","setTextArray","isTextLoaded","setIsTextLoaded","speed","setSpeed","currentWordIndex","setCurrentWordIndex","isReading","setIsReading","pageNumber","setPageNumber","numPages","setNumPages","selectedPage","setSelectedPage","onFileChange","event","target","files","onDocumentLoadSuccess","pdf","extractTextFromSelectedPage","pdfFile","pageNum","loadingTask","getDocument","url","URL","createObjectURL","promise","page","getPage","textContent","getTextContent","textItems","items","map","item","str","text","join","wordsArray","split","filter","word","trim","error","console","startReading","stopReading","interval","setInterval","prevIndex","length","clearInterval","className","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onLoadSuccess","min","max","value","e","parseInt","onClick","_c","$RefreshReg$"],"sources":["/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport './App.css';\n\n// Указываем путь к воркеру для PDF.js\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.js`;\n\nfunction App() {\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n  const [textArray, setTextArray] = useState([]); // Для хранения массива слов\n  const [isTextLoaded, setIsTextLoaded] = useState(false); // Флаг для отображения кнопки \"Старт\"\n  const [speed, setSpeed] = useState(100); // Скорость (слов в минуту)\n  const [currentWordIndex, setCurrentWordIndex] = useState(0); // Индекс текущего слова\n  const [isReading, setIsReading] = useState(false); // Флаг чтения\n  const [pageNumber, setPageNumber] = useState(1); // Текущий номер страницы\n  const [numPages, setNumPages] = useState(null); // Общее количество страниц\n  const [selectedPage, setSelectedPage] = useState(null); // Выбранная страница для конвертации\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(file); // Сохраняем выбранный файл\n      setPageNumber(1); // Сбрасываем на первую страницу\n      setSelectedPage(null); // Сбрасываем выбранную страницу\n      setIsTextLoaded(false); // Сбрасываем флаг загрузки текста\n    }\n  }\n\n  // Функция обработки загрузки документа PDF\n  function onDocumentLoadSuccess(pdf) {\n    setNumPages(pdf.numPages); // Устанавливаем количество страниц\n  }\n\n  // Извлечение текста с выбранной страницы с использованием pdfjs\n  async function extractTextFromSelectedPage(pdfFile, pageNum) {\n    try {\n      const loadingTask = pdfjs.getDocument({ url: URL.createObjectURL(pdfFile) });\n      const pdf = await loadingTask.promise;\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n      const textItems = textContent.items.map((item) => item.str);\n      const text = textItems.join(' ');\n      const wordsArray = text.split(' ').filter((word) => word.trim() !== '');\n      setTextArray(wordsArray);\n      setCurrentWordIndex(0);\n      setIsTextLoaded(true);\n    } catch (error) {\n      console.error(\"Error extracting text from PDF: \", error);\n    }\n  }\n\n  // Запуск процесса показа слов\n  function startReading() {\n    setIsReading(true);\n  }\n\n  // Остановка показа слов\n  function stopReading() {\n    setIsReading(false);\n  }\n\n  // Обновление индекса текущего слова\n  useEffect(() => {\n    let interval = null;\n    if (isReading) {\n      interval = setInterval(() => {\n        setCurrentWordIndex((prevIndex) => {\n          if (prevIndex < textArray.length - 1) {\n            return prevIndex + 1;\n          } else {\n            clearInterval(interval);\n            setIsReading(false);\n            return prevIndex;\n          }\n        });\n      }, (60 / speed) * 1000);\n    } else {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isReading, speed, textArray]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input type=\"file\" accept=\"application/pdf\" onChange={onFileChange} />\n        {file && (\n          <>\n            {/* Отображение текущей страницы PDF с помощью react-pdf */}\n            <Document\n              file={file}\n              onLoadSuccess={onDocumentLoadSuccess}\n            >\n              <Page pageNumber={pageNumber} />\n            </Document>\n            <div>\n              <label>Go to page: </label>\n              <input\n                type=\"number\"\n                min=\"1\"\n                max={numPages}\n                value={pageNumber}\n                onChange={(e) => setPageNumber(parseInt(e.target.value) || 1)}\n              />\n              <button onClick={() => setSelectedPage(pageNumber)}>\n                Select Page\n              </button>\n            </div>\n          </>\n        )}\n        {selectedPage && (\n          <>\n            <button onClick={() => extractTextFromSelectedPage(file, selectedPage)}>\n              Convert text from page {selectedPage}\n            </button>\n          </>\n        )}\n        {isTextLoaded && (\n          <>\n            <div>\n              <input\n                type=\"range\"\n                min=\"10\"\n                max=\"300\"\n                value={speed}\n                onChange={(e) => setSpeed(parseInt(e.target.value))}\n              />\n              <label>Words per minute: {speed}</label>\n            </div>\n            {!isReading ? (\n              <button onClick={startReading}>Start Reading</button>\n            ) : (\n              <button onClick={stopReading}>Stop Reading</button>\n            )}\n          </>\n        )}\n        {isReading && textArray[currentWordIndex] && (\n          <h1>{textArray[currentWordIndex]}</h1>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}