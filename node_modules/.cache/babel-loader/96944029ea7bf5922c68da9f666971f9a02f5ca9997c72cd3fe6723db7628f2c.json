{"ast":null,"code":"var _jsxFileName = \"/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport pdfToText from 'react-pdftotext';\nimport './App.css';\n\n// Указываем путь к воркеру для PDF.js\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n  const [textArray, setTextArray] = useState([]); // Для хранения массива слов\n  const [isTextLoaded, setIsTextLoaded] = useState(false); // Флаг для отображения кнопки \"Старт\"\n  const [speed, setSpeed] = useState(100); // Скорость (слов в минуту)\n  const [currentLetterIndex, setCurrentLetterIndex] = useState(0); // Индекс текущей буквы\n  const [isReading, setIsReading] = useState(false); // Флаг чтения\n  const [pageNumber, setPageNumber] = useState(1); // Текущий номер страницы\n  const [numPages, setNumPages] = useState(null); // Общее количество страниц\n  const intervalRef = useRef(null); // Для хранения таймера\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(file); // Сохраняем выбранный файл\n      setPageNumber(1); // Сбрасываем на первую страницу\n    }\n  }\n\n  // Функция обработки загрузки документа PDF\n  function onDocumentLoadSuccess({\n    numPages\n  }) {\n    setNumPages(numPages); // Устанавливаем количество страниц\n    extractTextFromPage(file, pageNumber); // Извлекаем текст с текущей страницы\n  }\n\n  // Извлечение текста с определенной страницы PDF с помощью react-pdftotext\n  function extractTextFromPage(file, pageNumber) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const arrayBuffer = e.target.result;\n      const blob = new Blob([new Uint8Array(arrayBuffer)], {\n        type: 'application/pdf'\n      });\n      pdfToText(blob, {\n        pages: [pageNumber]\n      }) // Извлекаем текст с указанной страницы\n      .then(text => {\n        const letterArray = text.split(''); // Разбиваем текст на массив букв\n        setTextArray(letterArray); // Сохраняем буквы в массив\n        setCurrentLetterIndex(0); // Сбрасываем индекс для чтения\n        setIsTextLoaded(true); // Отображаем кнопку \"Старт\"\n      }).catch(error => {\n        console.error(\"Error extracting text from PDF: \", error);\n      });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  // Запуск процесса показа букв\n  function startReading() {\n    setIsReading(true);\n    updateInterval();\n  }\n\n  // Остановка показа букв\n  function stopReading() {\n    setIsReading(false);\n    clearInterval(intervalRef.current);\n  }\n\n  // Обновление интервала при изменении скорости\n  function updateInterval() {\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      setCurrentLetterIndex(prevIndex => {\n        if (prevIndex < textArray.length - 1) {\n          return prevIndex + 1;\n        } else {\n          clearInterval(intervalRef.current);\n          return prevIndex;\n        }\n      });\n    }, 60 / speed * 1000); // Устанавливаем интервал на основе скорости букв в минуту\n  }\n\n  // Обновляем интервал динамически при изменении скорости\n  useEffect(() => {\n    if (isReading) {\n      updateInterval(); // Обновляем таймер, если читаем\n    }\n    // Очищаем таймер при размонтировании\n    return () => clearInterval(intervalRef.current);\n  }, [speed, isReading]); // Обновляем, когда изменяется скорость или статус чтения\n\n  // Переход к следующей странице\n  function nextPage() {\n    if (pageNumber < numPages) {\n      stopReading(); // Останавливаем чтение текущей страницы\n      setPageNumber(prevPage => prevPage + 1);\n      extractTextFromPage(file, pageNumber + 1); // Извлекаем текст со следующей страницы\n    }\n  }\n\n  // Переход к предыдущей странице\n  function prevPage() {\n    if (pageNumber > 1) {\n      stopReading(); // Останавливаем чтение текущей страницы\n      setPageNumber(prevPage => prevPage - 1);\n      extractTextFromPage(file, pageNumber - 1); // Извлекаем текст с предыдущей страницы\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        onChange: onFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), file && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Document, {\n          file: file,\n          onLoadSuccess: onDocumentLoadSuccess,\n          children: /*#__PURE__*/_jsxDEV(Page, {\n            pageNumber: pageNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: prevPage,\n            disabled: pageNumber <= 1,\n            children: \"Previous Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: nextPage,\n            disabled: pageNumber >= numPages,\n            children: \"Next Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), isTextLoaded && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"10\",\n            max: \"300\",\n            value: speed,\n            onChange: e => setSpeed(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Letters per minute: \", speed]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), !isReading ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startReading,\n          children: \"Start Reading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopReading,\n          children: \"Stop Reading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), isReading && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: textArray[currentLetterIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kdl8j+O4yEQKReZh3WdVhZOUjSE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Document","Page","pdfjs","pdfToText","jsxDEV","_jsxDEV","Fragment","_Fragment","GlobalWorkerOptions","workerSrc","version","App","_s","file","setFile","textArray","setTextArray","isTextLoaded","setIsTextLoaded","speed","setSpeed","currentLetterIndex","setCurrentLetterIndex","isReading","setIsReading","pageNumber","setPageNumber","numPages","setNumPages","intervalRef","onFileChange","event","target","files","onDocumentLoadSuccess","extractTextFromPage","reader","FileReader","onload","e","arrayBuffer","result","blob","Blob","Uint8Array","type","pages","then","text","letterArray","split","catch","error","console","readAsArrayBuffer","startReading","updateInterval","stopReading","clearInterval","current","setInterval","prevIndex","length","nextPage","prevPage","className","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onLoadSuccess","onClick","disabled","min","max","value","_c","$RefreshReg$"],"sources":["/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport pdfToText from 'react-pdftotext';\nimport './App.css';\n\n// Указываем путь к воркеру для PDF.js\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;\n\nfunction App() {\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n  const [textArray, setTextArray] = useState([]); // Для хранения массива слов\n  const [isTextLoaded, setIsTextLoaded] = useState(false); // Флаг для отображения кнопки \"Старт\"\n  const [speed, setSpeed] = useState(100); // Скорость (слов в минуту)\n  const [currentLetterIndex, setCurrentLetterIndex] = useState(0); // Индекс текущей буквы\n  const [isReading, setIsReading] = useState(false); // Флаг чтения\n  const [pageNumber, setPageNumber] = useState(1); // Текущий номер страницы\n  const [numPages, setNumPages] = useState(null); // Общее количество страниц\n  const intervalRef = useRef(null); // Для хранения таймера\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(file); // Сохраняем выбранный файл\n      setPageNumber(1); // Сбрасываем на первую страницу\n    }\n  }\n\n  // Функция обработки загрузки документа PDF\n  function onDocumentLoadSuccess({ numPages }) {\n    setNumPages(numPages); // Устанавливаем количество страниц\n    extractTextFromPage(file, pageNumber); // Извлекаем текст с текущей страницы\n  }\n\n  // Извлечение текста с определенной страницы PDF с помощью react-pdftotext\n  function extractTextFromPage(file, pageNumber) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const arrayBuffer = e.target.result;\n      const blob = new Blob([new Uint8Array(arrayBuffer)], { type: 'application/pdf' });\n\n      pdfToText(blob, { pages: [pageNumber] }) // Извлекаем текст с указанной страницы\n        .then((text) => {\n          const letterArray = text.split(''); // Разбиваем текст на массив букв\n          setTextArray(letterArray); // Сохраняем буквы в массив\n          setCurrentLetterIndex(0); // Сбрасываем индекс для чтения\n          setIsTextLoaded(true); // Отображаем кнопку \"Старт\"\n        })\n        .catch((error) => {\n          console.error(\"Error extracting text from PDF: \", error);\n        });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  // Запуск процесса показа букв\n  function startReading() {\n    setIsReading(true);\n    updateInterval();\n  }\n\n  // Остановка показа букв\n  function stopReading() {\n    setIsReading(false);\n    clearInterval(intervalRef.current);\n  }\n\n  // Обновление интервала при изменении скорости\n  function updateInterval() {\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      setCurrentLetterIndex((prevIndex) => {\n        if (prevIndex < textArray.length - 1) {\n          return prevIndex + 1;\n        } else {\n          clearInterval(intervalRef.current);\n          return prevIndex;\n        }\n      });\n    }, (60 / speed) * 1000); // Устанавливаем интервал на основе скорости букв в минуту\n  }\n\n  // Обновляем интервал динамически при изменении скорости\n  useEffect(() => {\n    if (isReading) {\n      updateInterval(); // Обновляем таймер, если читаем\n    }\n    // Очищаем таймер при размонтировании\n    return () => clearInterval(intervalRef.current);\n  }, [speed, isReading]); // Обновляем, когда изменяется скорость или статус чтения\n\n  // Переход к следующей странице\n  function nextPage() {\n    if (pageNumber < numPages) {\n      stopReading(); // Останавливаем чтение текущей страницы\n      setPageNumber((prevPage) => prevPage + 1);\n      extractTextFromPage(file, pageNumber + 1); // Извлекаем текст со следующей страницы\n    }\n  }\n\n  // Переход к предыдущей странице\n  function prevPage() {\n    if (pageNumber > 1) {\n      stopReading(); // Останавливаем чтение текущей страницы\n      setPageNumber((prevPage) => prevPage - 1);\n      extractTextFromPage(file, pageNumber - 1); // Извлекаем текст с предыдущей страницы\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input type=\"file\" accept=\"application/pdf\" onChange={onFileChange} />\n        {file && (\n          <>\n            {/* Отображение текущей страницы PDF с помощью react-pdf */}\n            <Document\n              file={file}\n              onLoadSuccess={onDocumentLoadSuccess}\n            >\n              <Page pageNumber={pageNumber} />\n            </Document>\n            <div>\n              <button onClick={prevPage} disabled={pageNumber <= 1}>\n                Previous Page\n              </button>\n              <button onClick={nextPage} disabled={pageNumber >= numPages}>\n                Next Page\n              </button>\n            </div>\n          </>\n        )}\n        {isTextLoaded && (\n          <>\n            <div>\n              <input\n                type=\"range\"\n                min=\"10\"\n                max=\"300\"\n                value={speed}\n                onChange={(e) => setSpeed(e.target.value)}\n              />\n              <label>Letters per minute: {speed}</label>\n            </div>\n            {!isReading ? (\n              <button onClick={startReading}>Start Reading</button>\n            ) : (\n              <button onClick={stopReading}>Stop Reading</button>\n            )}\n          </>\n        )}\n        {isReading && <h1>{textArray[currentLetterIndex]}</h1>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}