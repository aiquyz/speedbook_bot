{"ast":null,"code":"var _jsxFileName = \"/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport pdfToText from 'react-pdftotext';\nimport './App.css';\n\n// Указываем путь к воркеру для PDF.js\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n  const [textArray, setTextArray] = useState([]); // Для хранения массива слов\n  const [isTextLoaded, setIsTextLoaded] = useState(false); // Флаг для отображения кнопки \"Старт\"\n  const [speed, setSpeed] = useState(100); // Скорость (слов в минуту)\n  const [currentWordIndex, setCurrentWordIndex] = useState(0); // Индекс текущего слова\n  const [isReading, setIsReading] = useState(false); // Флаг чтения\n  const [pageNumber, setPageNumber] = useState(1); // Текущий номер страницы\n  const [numPages, setNumPages] = useState(null); // Общее количество страниц\n  const [selectedPage, setSelectedPage] = useState(null); // Выбранная страница для конвертации\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(file); // Сохраняем выбранный файл\n      setPageNumber(1); // Сбрасываем на первую страницу\n      setSelectedPage(null); // Сбрасываем выбранную страницу\n    }\n  }\n\n  // Функция обработки загрузки документа PDF\n  function onDocumentLoadSuccess({\n    numPages\n  }) {\n    setNumPages(numPages); // Устанавливаем количество страниц\n  }\n\n  // Извлечение текста с выбранной страницы PDF с помощью react-pdftotext\n  function extractTextFromSelectedPage(file, selectedPage) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const arrayBuffer = e.target.result;\n      const blob = new Blob([new Uint8Array(arrayBuffer)], {\n        type: 'application/pdf'\n      });\n      pdfToText(blob, {\n        pages: [selectedPage]\n      }) // Извлекаем текст с выбранной страницы\n      .then(text => {\n        const wordsArray = text.split(' ').filter(word => word.trim() !== ''); // Разбиваем текст на массив слов\n        setTextArray(wordsArray); // Сохраняем слова в массив\n        setCurrentWordIndex(0); // Сбрасываем индекс для чтения\n        setIsTextLoaded(true); // Отображаем кнопку \"Старт\"\n      }).catch(error => {\n        console.error(\"Error extracting text from PDF: \", error);\n      });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  // Запуск процесса показа слов\n  function startReading() {\n    setIsReading(true);\n    updateInterval();\n  }\n\n  // Остановка показа слов\n  function stopReading() {\n    setIsReading(false);\n  }\n\n  // Обновление интервала при изменении скорости\n  function updateInterval() {\n    const interval = setInterval(() => {\n      setCurrentWordIndex(prevIndex => {\n        if (prevIndex < textArray.length - 1) {\n          return prevIndex + 1;\n        } else {\n          clearInterval(interval);\n          return prevIndex;\n        }\n      });\n    }, 60 / speed * 1000); // Устанавливаем интервал на основе скорости слов в минуту\n  }\n\n  // Обновляем интервал динамически при изменении скорости\n  useEffect(() => {\n    if (isReading) {\n      updateInterval(); // Обновляем таймер, если читаем\n    }\n  }, [speed, isReading]); // Обновляем, когда изменяется скорость или статус чтения\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        onChange: onFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), file && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Document, {\n          file: file,\n          onLoadSuccess: onDocumentLoadSuccess,\n          children: /*#__PURE__*/_jsxDEV(Page, {\n            pageNumber: pageNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Go to page: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"1\",\n            max: numPages,\n            value: pageNumber,\n            onChange: e => setPageNumber(parseInt(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedPage(pageNumber),\n            children: \"Select Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), selectedPage && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => extractTextFromSelectedPage(file, selectedPage),\n          children: [\"Convert text from page \", selectedPage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)\n      }, void 0, false), isTextLoaded && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"10\",\n            max: \"300\",\n            value: speed,\n            onChange: e => setSpeed(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Words per minute: \", speed]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), !isReading ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startReading,\n          children: \"Start Reading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopReading,\n          children: \"Stop Reading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), isReading && /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: textArray[currentWordIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ICjIOHm7qt9jKVTUrNeVbsFGLEo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Document","Page","pdfjs","pdfToText","jsxDEV","_jsxDEV","Fragment","_Fragment","GlobalWorkerOptions","workerSrc","version","App","_s","file","setFile","textArray","setTextArray","isTextLoaded","setIsTextLoaded","speed","setSpeed","currentWordIndex","setCurrentWordIndex","isReading","setIsReading","pageNumber","setPageNumber","numPages","setNumPages","selectedPage","setSelectedPage","onFileChange","event","target","files","onDocumentLoadSuccess","extractTextFromSelectedPage","reader","FileReader","onload","e","arrayBuffer","result","blob","Blob","Uint8Array","type","pages","then","text","wordsArray","split","filter","word","trim","catch","error","console","readAsArrayBuffer","startReading","updateInterval","stopReading","interval","setInterval","prevIndex","length","clearInterval","className","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onLoadSuccess","min","max","value","parseInt","onClick","_c","$RefreshReg$"],"sources":["/Users/myroshnychenkovladislav/Desktop/speedbookJS/speedbookReact/speedbook/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport pdfToText from 'react-pdftotext';\nimport './App.css';\n\n// Указываем путь к воркеру для PDF.js\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;\n\nfunction App() {\n  const [file, setFile] = useState(null); // Для хранения загруженного PDF\n  const [textArray, setTextArray] = useState([]); // Для хранения массива слов\n  const [isTextLoaded, setIsTextLoaded] = useState(false); // Флаг для отображения кнопки \"Старт\"\n  const [speed, setSpeed] = useState(100); // Скорость (слов в минуту)\n  const [currentWordIndex, setCurrentWordIndex] = useState(0); // Индекс текущего слова\n  const [isReading, setIsReading] = useState(false); // Флаг чтения\n  const [pageNumber, setPageNumber] = useState(1); // Текущий номер страницы\n  const [numPages, setNumPages] = useState(null); // Общее количество страниц\n  const [selectedPage, setSelectedPage] = useState(null); // Выбранная страница для конвертации\n\n  // Функция для загрузки PDF файла\n  function onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      setFile(file); // Сохраняем выбранный файл\n      setPageNumber(1); // Сбрасываем на первую страницу\n      setSelectedPage(null); // Сбрасываем выбранную страницу\n    }\n  }\n\n  // Функция обработки загрузки документа PDF\n  function onDocumentLoadSuccess({ numPages }) {\n    setNumPages(numPages); // Устанавливаем количество страниц\n  }\n\n  // Извлечение текста с выбранной страницы PDF с помощью react-pdftotext\n  function extractTextFromSelectedPage(file, selectedPage) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const arrayBuffer = e.target.result;\n      const blob = new Blob([new Uint8Array(arrayBuffer)], { type: 'application/pdf' });\n\n      pdfToText(blob, { pages: [selectedPage] }) // Извлекаем текст с выбранной страницы\n        .then((text) => {\n          const wordsArray = text.split(' ').filter(word => word.trim() !== ''); // Разбиваем текст на массив слов\n          setTextArray(wordsArray); // Сохраняем слова в массив\n          setCurrentWordIndex(0); // Сбрасываем индекс для чтения\n          setIsTextLoaded(true); // Отображаем кнопку \"Старт\"\n        })\n        .catch((error) => {\n          console.error(\"Error extracting text from PDF: \", error);\n        });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  // Запуск процесса показа слов\n  function startReading() {\n    setIsReading(true);\n    updateInterval();\n  }\n\n  // Остановка показа слов\n  function stopReading() {\n    setIsReading(false);\n  }\n\n  // Обновление интервала при изменении скорости\n  function updateInterval() {\n    const interval = setInterval(() => {\n      setCurrentWordIndex((prevIndex) => {\n        if (prevIndex < textArray.length - 1) {\n          return prevIndex + 1;\n        } else {\n          clearInterval(interval);\n          return prevIndex;\n        }\n      });\n    }, (60 / speed) * 1000); // Устанавливаем интервал на основе скорости слов в минуту\n  }\n\n  // Обновляем интервал динамически при изменении скорости\n  useEffect(() => {\n    if (isReading) {\n      updateInterval(); // Обновляем таймер, если читаем\n    }\n  }, [speed, isReading]); // Обновляем, когда изменяется скорость или статус чтения\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input type=\"file\" accept=\"application/pdf\" onChange={onFileChange} />\n        {file && (\n          <>\n            {/* Отображение текущей страницы PDF с помощью react-pdf */}\n            <Document\n              file={file}\n              onLoadSuccess={onDocumentLoadSuccess}\n            >\n              <Page pageNumber={pageNumber} />\n            </Document>\n            <div>\n              <label>Go to page: </label>\n              <input\n                type=\"number\"\n                min=\"1\"\n                max={numPages}\n                value={pageNumber}\n                onChange={(e) => setPageNumber(parseInt(e.target.value))}\n              />\n              <button onClick={() => setSelectedPage(pageNumber)}>\n                Select Page\n              </button>\n            </div>\n          </>\n        )}\n        {selectedPage && (\n          <>\n            <button onClick={() => extractTextFromSelectedPage(file, selectedPage)}>\n              Convert text from page {selectedPage}\n            </button>\n          </>\n        )}\n        {isTextLoaded && (\n          <>\n            <div>\n              <input\n                type=\"range\"\n                min=\"10\"\n                max=\"300\"\n                value={speed}\n                onChange={(e) => setSpeed(e.target.value)}\n              />\n              <label>Words per minute: {speed}</label>\n            </div>\n            {!isReading ? (\n              <button onClick={startReading}>Start Reading</button>\n            ) : (\n              <button onClick={stopReading}>Stop Reading</button>\n            )}\n          </>\n        )}\n        {isReading && <h1>{textArray[currentWordIndex]}</h1>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}